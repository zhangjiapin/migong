#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<time.h>
int language;//1-Chinese,2-English
int PanDuan=0;
struct Account//用户信息 
{
	char name[150];
	char idCard[19];
	char tel[12];
	char username[25];
	char password[7];
	int money;
	struct Account * next;//下一个结点的地址 
};
typedef struct Account Account;
Account * head=NULL;//指向头结点的指针
Account * tail=NULL;//指向尾结点的指针 
Account * curAccount=NULL;//记录当前账户 
Account * otherAccount=NULL;//记录对方账户
struct Transaction//存款取款记录 
{
	char username[50];
	char timestamp[200];//时间 
	char time[150];
	char type[100];//--取款，+-存款
	int amount;//数额
	
	struct Transaction * next;
};
typedef struct Transaction Transaction;
Transaction * tHead=NULL;
Transaction * tTail=NULL;
void loadData()
{
	FILE* fp=fopen("D:/atm.txt","r");
	if(fp!=NULL)
	{
		while(!feof(fp))
		{
			//创建结点 
			Account * newNode=(Account *)malloc(sizeof(Account));
			//结点初始化 
			newNode->next=NULL;
			int res=fscanf(fp,"%s %s %s %s %s %d\n",newNode->name,newNode->idCard,newNode->tel,newNode->username,newNode->password,&newNode->money); 
			if(res==EOF)
			{
				free(newNode);
				return; 
			}
			//添加结点到链表
			if(head==NULL)
			{
				head=newNode;
				tail=newNode;
			} 
			else
			{
				tail->next=newNode;
				tail=newNode;
			}
		}
		fclose(fp);
		printf("加载成功！\n\n");
		PanDuan=1;
	}
}
void saveData()
{
	FILE* fp=fopen("D:/atm.txt","w");
	if(fp==NULL)
	{
		return;
	}
	Account * curP=head;
	while(curP!=NULL)
	{
		fprintf(fp,"%s\t%s\t%s\t%s\t%s\t%d\n",curP->name,curP->idCard,curP->tel,curP->username,curP->password,curP->money);
		curP=curP->next;
	}
	fclose(fp);
	
}
void loadDatatime() 
{
	FILE* fp=fopen("D:/transaction.txt","r"); 
	if(fp!=NULL)
	{
		while(!feof(fp))
		{
			//创建结点 
			Transaction * newNode=(Transaction *)malloc(sizeof(Transaction));
			//结点初始化 
			newNode->next=NULL;
			int res=fscanf(fp,"%s %s %s %s %d\n",newNode->username,newNode->timestamp,newNode->time,newNode->type,&newNode->amount); 
			if(res==EOF)
			{
				free(newNode);
				return;
			}
			//添加结点到链表
			if(tHead==NULL)
			{
				tHead=newNode;
				tTail=newNode;
			}
			else
			{
				tTail->next=newNode;
				tTail=newNode;
			}
		}
		fclose(fp);
		printf("加载成功！\n\n");
	}
}
void saveTransaction()
{
	FILE *fp=fopen("D:/transaction.txt","w");
	if(fp!=NULL)
	{
		Transaction * curp=tHead;
		while(curp!=NULL)
		{
			fprintf(fp,"%s\t%s\t%s\t%s\t%d\n",curp->username,curp->timestamp,curp->time,curp->type,curp->amount);
			curp=curp->next;
		}
		fclose(fp);
	}
}
void signUp()
{
	//申请一块内存空间，将其地址赋值给指针newNodeP 
	Account * newNodeP=(Account *)malloc(sizeof(Account));
	//为节点赋值 
	while(1)
	{
		if(language==1)
		{
			printf("输入账户：\n");
		}
		else if(language==2)
		{
			printf("Input username:\n");
		}
		char username[25];
		scanf("%s",username);
		Account*curP=head;
		if(curP==NULL)
		{
			strcpy(newNodeP->username,username);
			if(language==1)
			{
				printf("输入名字：\n");
			}
			else if(language==2)
			{
				printf("Input name:\n");
			}
			scanf("%s",newNodeP->name);
			if(language==1)
			{
				printf("输入身份证：\n");
			}
			else if(language==2)
			{
				printf("Input idCard:\n");
			}
			scanf("%s",newNodeP->idCard);
			if(language==1)
			{
				printf("输入电话：\n");
			}
			else if(language==2)
			{
				printf("Input tel:\n");
			}
			scanf("%s",newNodeP->tel);
			
			if(language==1)
			{
				printf("输入密码：\n");
			}
			else if(language==2)
			{
				printf("Input password:\n");
			}
			scanf("%s",newNodeP->password);
			newNodeP->money=0;
			newNodeP->next=NULL;
			//将结点添加到链表 
			if(head==NULL)
			{
				head=newNodeP;
				tail=newNodeP;
			}
			else
			{
				tail->next=newNodeP;
				tail=newNodeP;
			}
			printf("注册成功！\n\n");
			printf("按 1 返回\n");
			int i;
			scanf("%d",&i);
			if(i==1)
			{
				system("cls");
			}
			break;
		}
		else
		{
			while(curP!=NULL)
			{
				if((strcmp(curP->username,username)==0))
				{
					printf("该账户已存在！！！\n\n");
					printf("请重新输入\n\n"); 
					break;
				}
				else
				{
					if((strcmp(curP->username,tail->username)==0))
					{
						strcpy(newNodeP->username,username);
						if(language==1)
						{
							printf("输入名字：\n");
						}
						else if(language==2)
						{
							printf("Input name:\n");
						}
						scanf("%s",newNodeP->name);
						if(language==1)
						{
							printf("输入身份证：\n");
						}
						else if(language==2)
						{
							printf("Input idCard:\n");
						}
						scanf("%s",newNodeP->idCard);
						if(language==1)
						{
							printf("输入电话：\n");
						}
						else if(language==2)
						{
							printf("Input tel:\n");
						}
						scanf("%s",newNodeP->tel);
					
						if(language==1)
						{
							printf("输入密码：\n");
						}
						else if(language==2)
						{
							printf("Input password:\n");
						}
						scanf("%s",newNodeP->password);
						newNodeP->money=0;
						newNodeP->next=NULL;
						//将结点添加到链表 
						if(head==NULL)
						{
							head=newNodeP;
							tail=newNodeP;
						}
						else
						{
							tail->next=newNodeP;
							tail=newNodeP;
						}
						printf("注册成功！\n\n");
						printf("按 1 返回\n");
						int i;
						scanf("%d",&i);
						if(i==1)
						{
							system("cls");
						}
						break;
					}
					curP=curP->next;				
				}
			}
		}
		if((strcmp(newNodeP->username,username)==0))
		{
			break;
		}
	}
}
int findAccount(Account a)
{
	Account * curp=head;
	while(curp!=NULL)
	{
		if((strcmp(curp->username,a.username)==0)&&(strcmp(curp->password,a.password)==0))
		{
			curAccount=curp; 
			return 1;
		}
		curp=curp->next;
	}
	return 0;
}
void updatePassword()
{
	printf("请输入旧密码：");
	char oldPassword[100];
	scanf("%s",oldPassword);
	if(strcmp(oldPassword,curAccount->password)==0)
	{
		printf("请输入新密码：");
		scanf("%s",curAccount->password);
		while(strcmp(oldPassword,curAccount->password)==0)
		{
			printf("新旧密码不能相同!!!!!!\n\n");
			printf("重新输入\n\n");
			scanf("%s",curAccount->password);
		}
		printf("修改成功\n\n");
	}
	else
	{
		printf("密码错误！不能修改！\n\n");
	}
}
void saveMoney()
{
	printf("请输入存款金额：");
	int money;
	scanf("%d",&money);	
	curAccount->money+=money;
	printf("存款成功！\n\n");
	//产生交易记录
	//创建结点
	Transaction * newNode=(Transaction *)malloc(sizeof(Transaction));
	//结点初始化
	newNode->next=NULL;
	strcpy(newNode->username,curAccount->username);
	time_t nowtime;//时间戳转换日期 
	nowtime=time(NULL);
	struct tm*timeinfo;
	char buffer[128];
	char buff[100];
	timeinfo=localtime(&nowtime);
	strftime(buffer,sizeof(buffer),"%Y/%m/%d",timeinfo);//时间戳转换日期 
	strftime(buff,sizeof(buff),"%H:%M:%S",timeinfo);
	strcpy(newNode->timestamp,buffer);
	strcpy(newNode->time,buff);
	char a[10]={'+'};
	strcpy(newNode->type,a);
	newNode->amount=money;	
	//添加交易记录结点到链表 
	if(tHead==NULL)
	{
		tHead=newNode;
		tTail=newNode;
	}
	else
	{
		tTail->next=newNode;
		tTail=newNode;
	}
}
void drawMoney()
{
	printf("请输入取款金额：");
	int money;
	scanf("%d",&money);
	if(curAccount->money>=money&&money%100==0)
	{
		curAccount->money-=money;
		printf("取款成功！\n");
		//产生交易记录
		//创建结点
		Transaction * newNode=(Transaction *)malloc(sizeof(Transaction));
		//结点初始化
		newNode->next=NULL;
		strcpy(newNode->username,curAccount->username);
		time_t nowtime;
		nowtime=time(NULL);
		struct tm*timeinfo;
		char buffer[128];
		char buff[100];
		timeinfo=localtime(&nowtime);
		strftime(buffer,sizeof(buffer),"%Y/%m/%d",timeinfo);//时间戳转换日期 
		strftime(buff,sizeof(buff),"%H:%M:%S",timeinfo);
		strcpy(newNode->timestamp,buffer);
		strcpy(newNode->time,buff);
		char a[10]={'-'};
		strcpy(newNode->type,a);
		newNode->amount=money;
		
		//添加交易记录结点到链表 
		if(tHead==NULL)
		{
			tHead=newNode;
			tTail=newNode;
		}
		else
		{
			tTail->next=newNode;
			tTail=newNode;
		}
	}
	else
	{
		printf("非法操作\n");
	}
}
void Record()
{
	Transaction * curp=tHead;
	while(curp!=NULL)
	{
		if(strcmp(curp->username,curAccount->username)==0)
		{
			printf("%s\t%s %s\t%s%d\n",curp->username,curp->timestamp,curp->time,curp->type,curp->amount);
		}
		curp=curp->next;
	}
}
void transfer()
{
	printf("请输入对方账户：");
	char otherUsername[100];
	scanf("%s",otherUsername);
	
	//验证账户的合法性、
	Account*cur=head;
	while(cur!=NULL)
	{
		if(strcmp(cur->username,otherUsername)==0)
		{
			otherAccount=cur;
			printf("请输入转账金额：");
			int money;
			scanf("%d",&money); 
		
			//验证金额的合法性
			if(curAccount->money>=money)
			{
				//转账（当前账户余额减少，对方账户余额增加） 
				curAccount->money -= money;
				//产生交易记录
				//创建结点
				Transaction * newNode=(Transaction *)malloc(sizeof(Transaction));
				//结点初始化
				newNode->next=NULL;
				strcpy(newNode->username,curAccount->username);
				time_t nowtime;//时间戳转换日期 
				nowtime=time(NULL);
				struct tm*timeinfo;
				char buffer[128];
				char buff[100];
				timeinfo=localtime(&nowtime);
				strftime(buffer,sizeof(buffer),"%Y/%m/%d",timeinfo);//时间戳转换日期 
				strftime(buff,sizeof(buff),"%H:%M:%S",timeinfo);
				strcpy(newNode->timestamp,buffer);
				strcpy(newNode->time,buff);
				char a[10]={'-'};
				strcpy(newNode->type,a);
				newNode->amount=money;	
				//添加交易记录结点到链表 
				if(tHead==NULL)
				{
					tHead=newNode;
					tTail=newNode;
				}
				else
				{
					tTail->next=newNode;
					tTail=newNode;
				}
				
				otherAccount->money += money;
				//产生交易记录
				//创建结点
				Transaction * new2Node=(Transaction *)malloc(sizeof(Transaction));
				//结点初始化
				new2Node->next=NULL;
				strcpy(new2Node->username,otherUsername);
				time_t now2time;//时间戳转换日期 
				now2time=time(NULL);
				struct tm*timeinfo2;
				char buffer2[128];
				char buff2[100];
				timeinfo2=localtime(&now2time);
				strftime(buffer2,sizeof(buffer2),"%Y/%m/%d",timeinfo2);//时间戳转换日期 
				strftime(buff2,sizeof(buff2),"%H:%M:%S",timeinfo2);
				strcpy(new2Node->timestamp,buffer2);
				strcpy(new2Node->time,buff2);
				char b[10]={'+'};
				strcpy(new2Node->type,b);
				new2Node->amount=money;	
				//添加交易记录结点到链表 
				if(tHead==NULL)
				{
					tHead=new2Node;
					tTail=new2Node;
				}
				else
				{
					tTail->next=new2Node;
					tTail=new2Node;
				}
				printf("转账成功！\n"); 
			}
			else
			{
				printf("余额不足！\n");
			}
			break;
		}
		cur=cur->next;
	}
	if(cur==NULL)
	{
		printf("账户名错误！\n\n");
	}
}
void signIn()
{
	for(int i=0;i<3;i++)
	{
		Account a; 
		printf("请输入账号：");
		scanf("%s",a.username);
		
		printf("请输入密码：");
		scanf("%s",a.password);
		
		if(findAccount(a))
		{
			int a;
			while(1)
			{
				system("cls");
	            printf("\n#########################登录成功!############################\n");
                printf("\n                      *  欢迎使用  *                                   \n");
                printf("\n##############################################################\n");
                printf("\n  ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n"); 
				printf("                         余额$：%d\n\n\n\n",curAccount->money);
                printf("      |◆◆|        ☆ 修改密码       请按 1        |◆◆|\n"); 
                printf("      |◆◆|        ☆ 存款业务       请按 2        |◆◆|\n");
                printf("      |◆◆|        ☆ 取款业务       请按 3        |◆◆|\n"); 
                printf("      |◆◆|        ☆ 交易记录查询   请按 4        |◆◆|\n");
                printf("      |◆◆|        ☆ 转账业务       请按 5        |◆◆|\n"); 
                printf("      |◆◆|                                        |◆◆|\n");
                printf("      ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n");
				int i;
				scanf("%d",&i);
				system("cls");
				if(i==1)
				{
					updatePassword();
					printf("返回操作页面请按 1  \n\n");
					printf("退出登录请按 2  \n\n");
					scanf("%d",&a);
					if(a==1)
					{
						continue;
					}
					else
					{
						break;
					}		
				} 
				else if(i==2)
				{ 
					saveMoney(); 
					printf(" 返回操作页面请按 1  \n\n");
					printf(" 退出登录请按 2  \n\n");
					scanf("%d",&a);
					if(a==1)
					{
						continue;
					}
					else
					{
						break;
					}
				}
				else if(i==3)
				{				 
					drawMoney();
					printf(" 返回操作页面请按 1  \n\n");
					printf(" 退出登录请按 2  \n\n");
					scanf("%d",&a);
					if(a==1)
					{
						continue;
					}
					else
					{
						break;
					}
				}
				else if(i==4)
				{
					Record();
					printf(" 返回操作页面请按 1  \n\n");
					printf(" 退出登录请按 2  \n\n");
					scanf("%d",&a);
					if(a==1)
					{
						continue;
					}
					else
					{
						break;
					}
				}
				else if(i==5)
				{
					transfer();
					printf(" 返回操作页面请按 1  \n\n");
					printf(" 退出登录请按 2 \n\n");
					scanf("%d",&a);
					if(a==1)
					{
						continue;
					}
					else
					{
						break;
					}
				}
				else if(i!=1&&i!=2&&i!=3)
				{
					break;
				}
			}
			system("cls");
			if(a!=1)
			{
				break;
			}
		}
		else
		{
			system("cls");
			printf("!!!!!!登录失败！账号或密码错误!!\n\n");
			int a=2-i;
			printf("!!!!!!!!你还有%d次机会!!!!!!!!!!\n\n",a);
		}
	}
}
//加载成功返回1，加载失败返回0 
void showMenu()
{
	while(1)
	{
		if(language==1)
		{
			printf("按1, 开户\n\n");
			printf("按2, 登陆\n\n");
			printf("按3, 退出\n\n");
		}
		else if(language==2)
		{
			printf("Press 1, sign up\n\n");
			printf("Press 2, sign in\n\n");
			printf("Press 3，sign out\n\n");
		}
		int n;
		scanf("%d",&n);//选择语言或退出 
		system("cls");
		if(n==1)
		{
			signUp();
		}
		else if(n==2)
		{
			signIn();
		}
		else if(n==3)
		{
		
			return; 
		}
	}
}


int main()
{
	printf("\n#################################################################################\n");
    printf("\n▓                          * 欢迎来到海星银行  *                           ▓\n");
   	printf("\n                         * Welcome to Haixing bank *                              \n");
    printf("\n#################################################################################\n");
    printf("\n                     ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n");
    printf("                  |◆|                                     |◆|\n");
    printf("                  |◆|       ☆ 中文服务    请按 1         |◆|\n"); 
    printf("                  |◆|       ☆ English Service   请按 2   |◆|\n");
    printf("                  |◆|                                     |◆|\n");
    printf("                     ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n");
    printf("\n#################################################################################\n");    
	scanf("%d",&language);
	system("cls");
	loadData();
	loadDatatime();
	showMenu();
	saveData();
	saveTransaction();
	return 0;	
}
